import base64
import requests
import os
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GITHUB_TOKEN = "1"
REPO_OWNER = "123wrer"
REPO_NAME = "test"
BRANCH = "main"
IMAGE_FOLDER = "image"

def check_repo_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    response = requests.get(url, headers=headers)
    return response.status_code == 200

def ensure_image_folder():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ image –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    gitkeep_path = f"{IMAGE_FOLDER}/.gitkeep"
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{gitkeep_path}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        print(f"‚úÖ –ü–∞–ø–∫–∞ {IMAGE_FOLDER} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –°–æ–∑–¥–∞–µ–º .gitkeep –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    data = {
        "message": f"Create {IMAGE_FOLDER} folder",
        "content": base64.b64encode(b"").decode('utf-8'),
        "branch": BRANCH
    }
    
    response = requests.put(url, headers=headers, json=data)
    if response.status_code in [200, 201]:
        print(f"‚úÖ –ü–∞–ø–∫–∞ {IMAGE_FOLDER} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {response.status_code}")
        print(response.text)
        return False

def upload_file(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É image"""
    local_path = filename
    remote_path = f"{IMAGE_FOLDER}/{os.path.basename(filename)}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(local_path):
        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(local_path, "rb") as file:
        file_content = file.read()
    encoded_content = base64.b64encode(file_content).decode('utf-8')
    
    # API URL
    api_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{remote_path}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    response = requests.get(api_url, headers=headers)
    sha = response.json().get('sha') if response.status_code == 200 else None
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    data = {
        "message": f"Upload {os.path.basename(filename)}",
        "content": encoded_content,
        "branch": BRANCH
    }
    
    if sha:
        data["sha"] = sha
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {remote_path}")
    else:
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {remote_path}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    response = requests.put(api_url, headers=headers, json=data)
    
    if response.status_code in [200, 201]:
        content_data = response.json()["content"]
        raw_url = content_data["download_url"]
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"üîó Raw-—Å—Å—ã–ª–∫–∞: {raw_url}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
        print(response.text)
        return False

def delete_file(filename):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ image"""
    remote_path = f"{IMAGE_FOLDER}/{filename}"
    api_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{remote_path}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º SHA —Ñ–∞–π–ª–∞
    response = requests.get(api_url, headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –§–∞–π–ª {remote_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    sha = response.json()["sha"]
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    data = {
        "message": f"Delete {filename}",
        "sha": sha,
        "branch": BRANCH
    }
    
    response = requests.delete(api_url, headers=headers, json=data)
    
    if response.status_code == 200:
        print(f"‚úÖ –§–∞–π–ª {remote_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
        print(response.text)
        return False

def list_files():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ image"""
    api_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{IMAGE_FOLDER}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        files = response.json()
        print(f"\nüìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ {IMAGE_FOLDER}:")
        for file in files:
            print(f"- {file['name']} ({file['size']} bytes)")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
        print(response.text)
        return False

def main():
    print("üöÄ GitHub File Manager")
    print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {REPO_OWNER}/{REPO_NAME}")
    print(f"–í–µ—Ç–∫–∞: {BRANCH}")
    print(f"–ü–∞–ø–∫–∞: {IMAGE_FOLDER}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not check_repo_access():
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ image
    if not ensure_image_folder():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É image")
        sys.exit(1)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("1. upload <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        print("2. delete <–∏–º—è_—Ñ–∞–π–ª–∞> - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
        print("3. list - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
        print("4. exit - –≤—ã—Ö–æ–¥")
        
        command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
        
        if command.startswith("upload "):
            filename = command[7:].strip()
            if filename:
                upload_file(filename)
            else:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        
        elif command.startswith("delete "):
            filename = command[7:].strip()
            if filename:
                delete_file(filename)
            else:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞")
        
        elif command == "list":
            list_files()
        
        elif command == "exit":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

if __name__ == "__main__":
    main()